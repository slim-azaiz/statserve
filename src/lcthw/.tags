!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BSSSC_BUFF_LEN	bstrlib.c	2290;"	d	file:
BSTRLIB_INCLUDE	bstrlib.h	16;"	d
BSTRLIB_NOVSNP	bstrlib.c	2744;"	d	file:
BSTRLIB_NOVSNP	bstrlib.h	29;"	d
BSTR_BS_BUFF_LENGTH_GET	bstrlib.h	35;"	d
BSTR_ERR	bstrlib.h	33;"	d
BSTR_OK	bstrlib.h	34;"	d
BSTree	bstree.h	/^typedef struct BSTree {$/;"	s
BSTree	bstree.h	/^} BSTree;$/;"	t	typeref:struct:BSTree
BSTreeNode	bstree.h	/^typedef struct BSTreeNode {$/;"	s
BSTreeNode	bstree.h	/^} BSTreeNode;$/;"	t	typeref:struct:BSTreeNode
BSTreeNode_create	bstree.c	/^static inline BSTreeNode *BSTreeNode_create(BSTreeNode * parent,$/;"	f	file:
BSTree_compare	bstree.h	/^typedef int (*BSTree_compare) (void *a, void *b);$/;"	t
BSTree_create	bstree.c	/^BSTree *BSTree_create(BSTree_compare compare)$/;"	f
BSTree_delete	bstree.c	/^void *BSTree_delete(BSTree * map, void *key)$/;"	f
BSTree_destroy	bstree.c	/^void BSTree_destroy(BSTree * map)$/;"	f
BSTree_destroy_cb	bstree.c	/^static int BSTree_destroy_cb(BSTreeNode * node)$/;"	f	file:
BSTree_find_min	bstree.c	/^static inline BSTreeNode *BSTree_find_min(BSTreeNode * node)$/;"	f	file:
BSTree_get	bstree.c	/^void *BSTree_get(BSTree * map, void *key)$/;"	f
BSTree_getnode	bstree.c	/^static inline BSTreeNode *BSTree_getnode(BSTree * map,$/;"	f	file:
BSTree_node_delete	bstree.c	/^static inline BSTreeNode *BSTree_node_delete(BSTree * map,$/;"	f	file:
BSTree_replace_node_in_parent	bstree.c	/^static inline void BSTree_replace_node_in_parent(BSTree * map,$/;"	f	file:
BSTree_set	bstree.c	/^int BSTree_set(BSTree * map, void *key, void *data)$/;"	f
BSTree_setnode	bstree.c	/^static inline void BSTree_setnode(BSTree * map, BSTreeNode * node,$/;"	f	file:
BSTree_swap	bstree.c	/^static inline void BSTree_swap(BSTreeNode * a, BSTreeNode * b)$/;"	f	file:
BSTree_traverse	bstree.c	/^int BSTree_traverse(BSTree * map, BSTree_traverse_cb traverse_cb)$/;"	f
BSTree_traverse_cb	bstree.h	/^typedef int (*BSTree_traverse_cb) (BSTreeNode * node);$/;"	t
BSTree_traverse_nodes	bstree.c	/^static inline int BSTree_traverse_nodes(BSTreeNode * node,$/;"	f	file:
BS_BUFF_SZ	bstrlib.c	1772;"	d	file:
ByteOf	radixmap.c	39;"	d	file:
CFCLEN	bstrlib.c	1278;"	d	file:
CFCLEN	bstrlib.c	1288;"	d	file:
DArray	darray.h	/^typedef struct DArray {$/;"	s
DArray	darray.h	/^} DArray;$/;"	t	typeref:struct:DArray
DArray_clear	darray.c	/^void DArray_clear(DArray * array)$/;"	f
DArray_clear_destroy	darray.c	/^void DArray_clear_destroy(DArray * array)$/;"	f
DArray_compare	darray_algos.h	/^typedef int (*DArray_compare) (const void *a, const void *b);$/;"	t
DArray_contract	darray.c	/^int DArray_contract(DArray * array)$/;"	f
DArray_count	darray.h	34;"	d
DArray_create	darray.c	/^DArray *DArray_create(size_t element_size, size_t initial_max)$/;"	f
DArray_destroy	darray.c	/^void DArray_destroy(DArray * array)$/;"	f
DArray_end	darray.h	33;"	d
DArray_expand	darray.c	/^int DArray_expand(DArray * array)$/;"	f
DArray_first	darray.h	32;"	d
DArray_free	darray.h	77;"	d
DArray_get	darray.h	/^static inline void *DArray_get(DArray * array, int i)$/;"	f
DArray_heapsort	darray_algos.c	/^int DArray_heapsort(DArray * array, DArray_compare cmp)$/;"	f
DArray_last	darray.h	31;"	d
DArray_max	darray.h	35;"	d
DArray_mergesort	darray_algos.c	/^int DArray_mergesort(DArray * array, DArray_compare cmp)$/;"	f
DArray_new	darray.h	/^static inline void *DArray_new(DArray * array)$/;"	f
DArray_pop	darray.c	/^void *DArray_pop(DArray * array)$/;"	f
DArray_push	darray.c	/^int DArray_push(DArray * array, void *el)$/;"	f
DArray_qsort	darray_algos.c	/^int DArray_qsort(DArray * array, DArray_compare cmp)$/;"	f
DArray_remove	darray.h	/^static inline void *DArray_remove(DArray * array, int i)$/;"	f
DArray_resize	darray.c	/^static inline int DArray_resize(DArray * array, size_t newsize)$/;"	f	file:
DArray_set	darray.h	/^static inline void DArray_set(DArray * array, int i, void *el)$/;"	f
DEFAULT_EXPAND_RATE	darray.h	37;"	d
DEFAULT_NUMBER_OF_BUCKETS	hashmap.h	7;"	d
FNV_OFFSET_BASIS	hashmap_algos.c	/^const uint32_t FNV_OFFSET_BASIS = 2166136261;$/;"	v
FNV_PRIME	hashmap_algos.c	/^const uint32_t FNV_PRIME = 16777619;$/;"	v
Hashmap	hashmap.h	/^typedef struct Hashmap {$/;"	s
Hashmap	hashmap.h	/^} Hashmap;$/;"	t	typeref:struct:Hashmap
HashmapNode	hashmap.h	/^typedef struct HashmapNode {$/;"	s
HashmapNode	hashmap.h	/^} HashmapNode;$/;"	t	typeref:struct:HashmapNode
Hashmap_adler32_hash	hashmap_algos.c	/^uint32_t Hashmap_adler32_hash(void *data)$/;"	f
Hashmap_compare	hashmap.h	/^typedef int (*Hashmap_compare) (void *a, void *b);$/;"	t
Hashmap_create	hashmap.c	/^Hashmap *Hashmap_create(Hashmap_compare compare, Hashmap_hash hash)$/;"	f
Hashmap_delete	hashmap.c	/^void *Hashmap_delete(Hashmap * map, void *key)$/;"	f
Hashmap_destroy	hashmap.c	/^void Hashmap_destroy(Hashmap * map)$/;"	f
Hashmap_djb_hash	hashmap_algos.c	/^uint32_t Hashmap_djb_hash(void *data)$/;"	f
Hashmap_find_bucket	hashmap.c	/^static inline DArray *Hashmap_find_bucket(Hashmap * map, void *key,$/;"	f	file:
Hashmap_fnv1a_hash	hashmap_algos.c	/^uint32_t Hashmap_fnv1a_hash(void *data)$/;"	f
Hashmap_get	hashmap.c	/^void *Hashmap_get(Hashmap * map, void *key)$/;"	f
Hashmap_get_node	hashmap.c	/^static inline int Hashmap_get_node(Hashmap * map, uint32_t hash,$/;"	f	file:
Hashmap_hash	hashmap.h	/^typedef uint32_t(*Hashmap_hash) (void *key);$/;"	t
Hashmap_node_create	hashmap.c	/^static inline HashmapNode *Hashmap_node_create(int hash, void *key,$/;"	f	file:
Hashmap_set	hashmap.c	/^int Hashmap_set(Hashmap * map, void *key, void *data)$/;"	f
Hashmap_traverse	hashmap.c	/^int Hashmap_traverse(Hashmap * map, Hashmap_traverse_cb traverse_cb)$/;"	f
Hashmap_traverse_cb	hashmap.h	/^typedef int (*Hashmap_traverse_cb) (HashmapNode * node);$/;"	t
INITIAL_STATIC_FIND_INDEX_COUNT	bstrlib.c	1552;"	d	file:
LIST_FOREACH	list.h	37;"	d
LONG_BITS_QTY	bstrlib.c	1275;"	d	file:
LONG_LOG_BITS_QTY	bstrlib.c	1274;"	d	file:
LONG_TYPE	bstrlib.c	1276;"	d	file:
List	list.h	/^typedef struct List {$/;"	s
List	list.h	/^} List;$/;"	t	typeref:struct:List
ListNode	list.h	/^typedef struct ListNode {$/;"	s
ListNode	list.h	/^} ListNode;$/;"	t	typeref:struct:ListNode
ListNode_swap	list_algos.c	/^inline void ListNode_swap(ListNode * a, ListNode * b)$/;"	f
List_bubble_sort	list_algos.c	/^int List_bubble_sort(List * list, List_compare cmp)$/;"	f
List_clear	list.c	/^void List_clear(List * list)$/;"	f
List_clear_destroy	list.c	/^void List_clear_destroy(List * list)$/;"	f
List_compare	list_algos.h	/^typedef int (*List_compare) (const void *a, const void *b);$/;"	t
List_count	list.h	25;"	d
List_create	list.c	/^List *List_create()$/;"	f
List_destroy	list.c	/^void List_destroy(List * list)$/;"	f
List_first	list.h	26;"	d
List_last	list.h	27;"	d
List_merge	list_algos.c	/^inline List *List_merge(List * left, List * right, List_compare cmp)$/;"	f
List_merge_sort	list_algos.c	/^List *List_merge_sort(List * list, List_compare cmp)$/;"	f
List_pop	list.c	/^void *List_pop(List * list)$/;"	f
List_push	list.c	/^void List_push(List * list, void *value)$/;"	f
List_remove	list.c	/^void *List_remove(List * list, ListNode * node)$/;"	f
List_shift	list.c	/^void *List_shift(List * list)$/;"	f
List_unshift	list.c	/^void List_unshift(List * list, void *value)$/;"	f
MOD_ADLER	hashmap_algos.c	/^const int MOD_ADLER = 65521;$/;"	v
NDEBUG	hashmap.c	1;"	d	file:
NDEBUG	ringbuffer.c	1;"	d	file:
NDEBUG	sarray.c	1;"	d	file:
QUEUE_FOREACH	queue.h	19;"	d
Queue	queue.h	/^typedef List Queue;$/;"	t
Queue_clear	queue.h	10;"	d
Queue_clear_destroy	queue.h	11;"	d
Queue_count	queue.h	16;"	d
Queue_create	queue.h	8;"	d
Queue_destroy	queue.h	9;"	d
Queue_peek	queue.h	17;"	d
Queue_recv	queue.h	14;"	d
Queue_send	queue.h	13;"	d
RMElement	radixmap.h	/^typedef union RMElement {$/;"	u
RMElement	radixmap.h	/^} RMElement;$/;"	t	typeref:union:RMElement
RadixMap	radixmap.h	/^typedef struct RadixMap {$/;"	s
RadixMap	radixmap.h	/^} RadixMap;$/;"	t	typeref:struct:RadixMap
RadixMap_add	radixmap.c	/^int RadixMap_add(RadixMap * map, uint32_t key, uint32_t value)$/;"	f
RadixMap_create	radixmap.c	/^RadixMap *RadixMap_create(size_t max)$/;"	f
RadixMap_delete	radixmap.c	/^int RadixMap_delete(RadixMap * map, RMElement * el)$/;"	f
RadixMap_destroy	radixmap.c	/^void RadixMap_destroy(RadixMap * map)$/;"	f
RadixMap_find	radixmap.c	/^RMElement *RadixMap_find(RadixMap * map, uint32_t to_find)$/;"	f
RadixMap_sort	radixmap.c	/^void RadixMap_sort(RadixMap * map)$/;"	f
RingBuffer	ringbuffer.h	/^} RingBuffer;$/;"	t	typeref:struct:__anon1
RingBuffer_available_data	ringbuffer.h	31;"	d
RingBuffer_available_space	ringbuffer.h	34;"	d
RingBuffer_clear	ringbuffer.h	59;"	d
RingBuffer_commit_read	ringbuffer.h	53;"	d
RingBuffer_commit_write	ringbuffer.h	56;"	d
RingBuffer_create	ringbuffer.c	/^RingBuffer *RingBuffer_create(int length)$/;"	f
RingBuffer_destroy	ringbuffer.c	/^void RingBuffer_destroy(RingBuffer * buffer)$/;"	f
RingBuffer_empty	ringbuffer.h	39;"	d
RingBuffer_ends_at	ringbuffer.h	50;"	d
RingBuffer_full	ringbuffer.h	37;"	d
RingBuffer_get_all	ringbuffer.h	44;"	d
RingBuffer_gets	ringbuffer.c	/^bstring RingBuffer_gets(RingBuffer * buffer, int amount)$/;"	f
RingBuffer_puts	ringbuffer.h	41;"	d
RingBuffer_read	ringbuffer.c	/^int RingBuffer_read(RingBuffer * buffer, char *target, int amount)$/;"	f
RingBuffer_starts_at	ringbuffer.h	47;"	d
RingBuffer_write	ringbuffer.c	/^int RingBuffer_write(RingBuffer * buffer, char *data, int length)$/;"	f
STACK_FOREACH	stack.h	19;"	d
START_VSNBUFF	bstrlib.c	2756;"	d	file:
START_VSNBUFF	bstrlib.c	2772;"	d	file:
Stack	stack.h	/^typedef List Stack;$/;"	t
Stack_clear	stack.h	10;"	d
Stack_clear_destroy	stack.h	11;"	d
Stack_count	stack.h	17;"	d
Stack_create	stack.h	8;"	d
Stack_destroy	stack.h	9;"	d
Stack_peek	stack.h	15;"	d
Stack_pop	stack.h	14;"	d
Stack_push	stack.h	13;"	d
Stats	stats.h	/^typedef struct Stats {$/;"	s
Stats	stats.h	/^} Stats;$/;"	t	typeref:struct:Stats
Stats_create	stats.c	/^Stats *Stats_create()$/;"	f
Stats_dump	stats.c	/^void Stats_dump(Stats * st)$/;"	f
Stats_mean	stats.c	/^double Stats_mean(Stats * st)$/;"	f
Stats_recreate	stats.c	/^Stats *Stats_recreate(double sum, double sumsq, unsigned long n,$/;"	f
Stats_sample	stats.c	/^void Stats_sample(Stats * st, double s)$/;"	f
Stats_stddev	stats.c	/^double Stats_stddev(Stats * st)$/;"	f
StringScanner	string_algos.h	/^typedef struct StringScanner {$/;"	s
StringScanner	string_algos.h	/^} StringScanner;$/;"	t	typeref:struct:StringScanner
StringScanner_create	string_algos.c	/^StringScanner *StringScanner_create(bstring in)$/;"	f
StringScanner_destroy	string_algos.c	/^void StringScanner_destroy(StringScanner * scan)$/;"	f
StringScanner_reset	string_algos.c	/^static inline void StringScanner_reset(StringScanner * scan)$/;"	f	file:
StringScanner_scan	string_algos.c	/^int StringScanner_scan(StringScanner * scan, bstring tofind)$/;"	f
StringScanner_set_needle	string_algos.c	/^static inline void StringScanner_set_needle(StringScanner * scan,$/;"	f	file:
String_base_search	string_algos.c	/^static inline const unsigned char *String_base_search(const unsigned$/;"	f	file:
String_find	string_algos.c	/^int String_find(bstring in, bstring what)$/;"	f
String_setup_skip_chars	string_algos.c	/^static inline void String_setup_skip_chars(size_t * skip_chars,$/;"	f	file:
SuffixArray	sarray.h	/^typedef struct SuffixArray {$/;"	s
SuffixArray	sarray.h	/^} SuffixArray;$/;"	t	typeref:struct:SuffixArray
SuffixArray_compare	sarray.c	/^int SuffixArray_compare(void *thunk, const void *a, const void *b)$/;"	f
SuffixArray_create	sarray.c	/^SuffixArray *SuffixArray_create(char *data, int length)$/;"	f
SuffixArray_destroy	sarray.c	/^void SuffixArray_destroy(SuffixArray *sarry)$/;"	f
SuffixArray_find_suffix	sarray.c	/^int SuffixArray_find_suffix(SuffixArray *sarry, char *data, int length)$/;"	f
SuffixArray_substr	sarray.h	16;"	d
TSTree	tstree.h	/^typedef struct TSTree {$/;"	s
TSTree	tstree.h	/^} TSTree;$/;"	t	typeref:struct:TSTree
TSTree_destroy	tstree.c	/^void TSTree_destroy(TSTree * node)$/;"	f
TSTree_insert	tstree.c	/^TSTree *TSTree_insert(TSTree * node, const char *key, size_t len,$/;"	f
TSTree_insert_base	tstree.c	/^static inline TSTree *TSTree_insert_base(TSTree * root, TSTree * node,$/;"	f	file:
TSTree_search	tstree.c	/^void *TSTree_search(TSTree * root, const char *key, size_t len)$/;"	f
TSTree_search_prefix	tstree.c	/^void *TSTree_search_prefix(TSTree * root, const char *key, size_t len)$/;"	f
TSTree_traverse	tstree.c	/^void TSTree_traverse(TSTree * node, TSTree_traverse_cb cb, void *data)$/;"	f
TSTree_traverse_cb	tstree.h	/^typedef void (*TSTree_traverse_cb) (void *value, void *data);$/;"	t
_CRT_SECURE_NO_WARNINGS	bstrlib.c	16;"	d	file:
_DArray_h	darray.h	2;"	d
__dbg_h__	dbg.h	2;"	d
_lcthw_BSTree_h	bstree.h	2;"	d
_lcthw_Hashmap_h	hashmap.h	2;"	d
_lcthw_Queue_h	queue.h	2;"	d
_lcthw_RingBuffer_h	ringbuffer.h	2;"	d
_lcthw_Stack_h	stack.h	2;"	d
_lcthw_TSTree_h	tstree.h	2;"	d
_lcthw_sarry_h	sarray.h	2;"	d
b	bstrlib.c	/^    bstring b;$/;"	m	struct:genBstrList	file:
bBlockCopy	bstrlib.c	67;"	d	file:
bNgetc	bstrlib.h	/^typedef int (*bNgetc) (void *parm);$/;"	t
bNread	bstrlib.h	/^typedef size_t (* bNread) (void *buff, size_t elsize, size_t nelem, void *parm);$/;"	t
bStream	bstrlib.c	/^struct bStream {$/;"	s	file:
balloc	bstrlib.c	/^int balloc (bstring b, int olen) {$/;"	f
ballocmin	bstrlib.c	/^int ballocmin (bstring b, int len) {$/;"	f
bassign	bstrlib.c	/^int bassign (bstring a, const_bstring b) {$/;"	f
bassignblk	bstrlib.c	/^int bassignblk (bstring a, const void * s, int len) {$/;"	f
bassigncstr	bstrlib.c	/^int bassigncstr (bstring a, const char * str) {$/;"	f
bassignformat	bstrlib.c	/^int bassignformat (bstring b, const char * fmt, ...) {$/;"	f
bassigngets	bstrlib.c	/^int bassigngets (bstring b, bNgetc getcPtr, void * parm, char terminator) {$/;"	f
bassignmidstr	bstrlib.c	/^int bassignmidstr (bstring a, const_bstring b, int left, int len) {$/;"	f
bcatblk	bstrlib.c	/^int bcatblk (bstring b, const void * s, int len) {$/;"	f
bcatcstr	bstrlib.c	/^int bcatcstr (bstring b, const char * s) {$/;"	f
bchar	bstrlib.h	203;"	d
bchare	bstrlib.h	202;"	d
bconcat	bstrlib.c	/^int bconcat (bstring b0, const_bstring b1) {$/;"	f
bconchar	bstrlib.c	/^int bconchar (bstring b, char c) {$/;"	f
bcstrfree	bstrlib.c	/^int bcstrfree (char * s) {$/;"	f
bdata	bstrlib.h	201;"	d
bdatae	bstrlib.h	200;"	d
bdataofs	bstrlib.h	199;"	d
bdataofse	bstrlib.h	198;"	d
bdelete	bstrlib.c	/^int bdelete (bstring b, int pos, int len) {$/;"	f
bdestroy	bstrlib.c	/^int bdestroy (bstring b) {$/;"	f
bfindreplace	bstrlib.c	/^int bfindreplace (bstring b, const_bstring find, const_bstring repl, int pos) {$/;"	f
bfindreplacecaseless	bstrlib.c	/^int bfindreplacecaseless (bstring b, const_bstring find, const_bstring repl, int pos) {$/;"	f
bformat	bstrlib.c	/^bstring bformat (const char * fmt, ...) {$/;"	f
bformata	bstrlib.c	/^int bformata (bstring b, const char * fmt, ...) {$/;"	f
bfromcstr	bstrlib.c	/^bstring bfromcstr (const char * str) {$/;"	f
bfromcstralloc	bstrlib.c	/^bstring bfromcstralloc (int mlen, const char * str) {$/;"	f
bgets	bstrlib.c	/^bstring bgets (bNgetc getcPtr, void * parm, char terminator) {$/;"	f
bgetsa	bstrlib.c	/^int bgetsa (bstring b, bNgetc getcPtr, void * parm, char terminator) {$/;"	f
binchr	bstrlib.c	/^int binchr (const_bstring b0, int pos, const_bstring b1) {$/;"	f
binchrCF	bstrlib.c	/^static int binchrCF (const unsigned char * data, int len, int pos, const struct charField * cf) {$/;"	f	file:
binchrr	bstrlib.c	/^int binchrr (const_bstring b0, int pos, const_bstring b1) {$/;"	f
binchrrCF	bstrlib.c	/^static int binchrrCF (const unsigned char * data, int pos, const struct charField * cf) {$/;"	f	file:
binsert	bstrlib.c	/^int binsert (bstring b1, int pos, const_bstring b2, unsigned char fill) {$/;"	f
binsertch	bstrlib.c	/^int binsertch (bstring b, int pos, int len, unsigned char fill) {$/;"	f
binstr	bstrlib.c	/^int binstr (const_bstring b1, int pos, const_bstring b2) {$/;"	f
binstrcaseless	bstrlib.c	/^int binstrcaseless (const_bstring b1, int pos, const_bstring b2) {$/;"	f
binstrr	bstrlib.c	/^int binstrr (const_bstring b1, int pos, const_bstring b2) {$/;"	f
binstrrcaseless	bstrlib.c	/^int binstrrcaseless (const_bstring b1, int pos, const_bstring b2) {$/;"	f
biseq	bstrlib.c	/^int biseq (const_bstring b0, const_bstring b1) {$/;"	f
biseqcaseless	bstrlib.c	/^int biseqcaseless (const_bstring b0, const_bstring b1) {$/;"	f
biseqcstr	bstrlib.c	/^int biseqcstr (const_bstring b, const char * s) {$/;"	f
biseqcstrcaseless	bstrlib.c	/^int biseqcstrcaseless (const_bstring b, const char * s) {$/;"	f
bisstemeqblk	bstrlib.c	/^int bisstemeqblk (const_bstring b0, const void * blk, int len) {$/;"	f
bisstemeqcaselessblk	bstrlib.c	/^int bisstemeqcaselessblk (const_bstring b0, const void * blk, int len) {$/;"	f
biswriteprotected	bstrlib.h	298;"	d
bjoin	bstrlib.c	/^bstring bjoin (const struct bstrList * bl, const_bstring sep) {$/;"	f
bl	bstrlib.c	/^    struct bstrList * bl;$/;"	m	struct:genBstrList	typeref:struct:genBstrList::bstrList	file:
blength	bstrlib.h	197;"	d
blengthe	bstrlib.h	196;"	d
blk2bstr	bstrlib.c	/^bstring blk2bstr (const void * blk, int len) {$/;"	f
blk2tbstr	bstrlib.h	225;"	d
bltrimws	bstrlib.c	/^int bltrimws (bstring b) {$/;"	f
bmid2tbstr	bstrlib.h	231;"	d
bmidstr	bstrlib.c	/^bstring bmidstr (const_bstring b, int left, int len) {$/;"	f
bninchr	bstrlib.c	/^int bninchr (const_bstring b0, int pos, const_bstring b1) {$/;"	f
bninchrr	bstrlib.c	/^int bninchrr (const_bstring b0, int pos, const_bstring b1) {$/;"	f
bpattern	bstrlib.c	/^int bpattern (bstring b, int len) {$/;"	f
bread	bstrlib.c	/^bstring bread (bNread readPtr, void * parm) {$/;"	f
breada	bstrlib.c	/^int breada (bstring b, bNread readPtr, void * parm) {$/;"	f
breplace	bstrlib.c	/^int breplace (bstring b1, int pos, int len, const_bstring b2, $/;"	f
brtrimws	bstrlib.c	/^int brtrimws (bstring b) {$/;"	f
bsStatic	bstrlib.h	209;"	d
bsStatic	bstrlib.h	212;"	d
bsStaticBlkParms	bstrlib.h	216;"	d
bsStaticMlen	bstrlib.h	206;"	d
bsbufflength	bstrlib.c	/^int bsbufflength (struct bStream * s, int sz) {$/;"	f
bscb	bstrlib.c	/^static int bscb (void * parm, int ofs, int len) {$/;"	f	file:
bsclose	bstrlib.c	/^void * bsclose (struct bStream * s) {$/;"	f
bseof	bstrlib.c	/^int bseof (const struct bStream * s) {$/;"	f
bsetstr	bstrlib.c	/^int bsetstr (bstring b0, int pos, const_bstring b1, unsigned char fill) {$/;"	f
bsopen	bstrlib.c	/^struct bStream * bsopen (bNread readPtr, void * parm) {$/;"	f
bspeek	bstrlib.c	/^int bspeek (bstring r, const struct bStream * s) {$/;"	f
bsplit	bstrlib.c	/^struct bstrList * bsplit (const_bstring str, unsigned char splitChar) {$/;"	f
bsplitcb	bstrlib.c	/^int bsplitcb (const_bstring str, unsigned char splitChar, int pos,$/;"	f
bsplits	bstrlib.c	/^struct bstrList * bsplits (const_bstring str, const_bstring splitStr) {$/;"	f
bsplitscb	bstrlib.c	/^int bsplitscb (const_bstring str, const_bstring splitStr, int pos,$/;"	f
bsplitstr	bstrlib.c	/^struct bstrList * bsplitstr (const_bstring str, const_bstring splitStr) {$/;"	f
bsplitstrcb	bstrlib.c	/^int bsplitstrcb (const_bstring str, const_bstring splitStr, int pos,$/;"	f
bsread	bstrlib.c	/^int bsread (bstring r, struct bStream * s, int n) {$/;"	f
bsreada	bstrlib.c	/^int bsreada (bstring r, struct bStream * s, int n) {$/;"	f
bsreadln	bstrlib.c	/^int bsreadln (bstring r, struct bStream * s, char terminator) {$/;"	f
bsreadlna	bstrlib.c	/^int bsreadlna (bstring r, struct bStream * s, char terminator) {$/;"	f
bsreadlns	bstrlib.c	/^int bsreadlns (bstring r, struct bStream * s, const_bstring term) {$/;"	f
bsreadlnsa	bstrlib.c	/^int bsreadlnsa (bstring r, struct bStream * s, const_bstring term) {$/;"	f
bssplitscb	bstrlib.c	/^int bssplitscb (struct bStream * s, const_bstring splitStr, $/;"	f
bssplitstrcb	bstrlib.c	/^int bssplitstrcb (struct bStream * s, const_bstring splitStr, $/;"	f
bstr2cstr	bstrlib.c	/^char * bstr2cstr (const_bstring b, char z) {$/;"	f
bstrList	bstrlib.h	/^struct bstrList {$/;"	s
bstrListAlloc	bstrlib.c	/^int bstrListAlloc (struct bstrList * sl, int msz) {$/;"	f
bstrListAllocMin	bstrlib.c	/^int bstrListAllocMin (struct bstrList * sl, int msz) {$/;"	f
bstrListCreate	bstrlib.c	/^struct bstrList * bstrListCreate (void) {$/;"	f
bstrListDestroy	bstrlib.c	/^int bstrListDestroy (struct bstrList * sl) {$/;"	f
bstr__alloc	bstrlib.c	34;"	d	file:
bstr__free	bstrlib.c	38;"	d	file:
bstr__memchr	bstrlib.c	62;"	d	file:
bstr__memcmp	bstrlib.c	58;"	d	file:
bstr__memcpy	bstrlib.c	46;"	d	file:
bstr__memmove	bstrlib.c	50;"	d	file:
bstr__memset	bstrlib.c	54;"	d	file:
bstr__realloc	bstrlib.c	42;"	d	file:
bstrchr	bstrlib.h	92;"	d
bstrchrp	bstrlib.c	/^int bstrchrp (const_bstring b, int c, int pos) {$/;"	f
bstrcmp	bstrlib.c	/^int bstrcmp (const_bstring b0, const_bstring b1) {$/;"	f
bstrcpy	bstrlib.c	/^bstring bstrcpy (const_bstring b) {$/;"	f
bstricmp	bstrlib.c	/^int bstricmp (const_bstring b0, const_bstring b1) {$/;"	f
bstring	bstrlib.h	/^typedef struct tagbstring * bstring;$/;"	t	typeref:struct:tagbstring
bstrncmp	bstrlib.c	/^int bstrncmp (const_bstring b0, const_bstring b1, int n) {$/;"	f
bstrnicmp	bstrlib.c	/^int bstrnicmp (const_bstring b0, const_bstring b1, int n) {$/;"	f
bstrrchr	bstrlib.h	93;"	d
bstrrchrp	bstrlib.c	/^int bstrrchrp (const_bstring b, int c, int pos) {$/;"	f
bsunread	bstrlib.c	/^int bsunread (struct bStream * s, const_bstring b) {$/;"	f
btfromblk	bstrlib.h	230;"	d
btfromblkltrimws	bstrlib.h	255;"	d
btfromblkrtrimws	bstrlib.h	267;"	d
btfromblktrimws	bstrlib.h	279;"	d
btfromcstr	bstrlib.h	220;"	d
btolower	bstrlib.c	/^int btolower (bstring b) {$/;"	f
btoupper	bstrlib.c	/^int btoupper (bstring b) {$/;"	f
btrimws	bstrlib.c	/^int btrimws (bstring b) {$/;"	f
btrunc	bstrlib.c	/^int btrunc (bstring b, int n) {$/;"	f
buckets	hashmap.h	/^    DArray *buckets;$/;"	m	struct:Hashmap
buff	bstrlib.c	/^    bstring buff;		\/* Buffer for over-reads *\/$/;"	m	struct:bStream	file:
buffer	ringbuffer.h	/^    char *buffer;$/;"	m	struct:__anon1
buildCharField	bstrlib.c	/^static int buildCharField (struct charField * cf, const_bstring b) {$/;"	f	file:
bvcformata	bstrlib.c	/^int bvcformata (bstring b, int count, const char * fmt, va_list arg) {$/;"	f
bvformata	bstrlib.h	138;"	d
bwriteallow	bstrlib.h	297;"	d
bwriteprotect	bstrlib.h	296;"	d
charField	bstrlib.c	/^struct charField { LONG_TYPE content[CFCLEN]; };$/;"	s	file:
charField	bstrlib.c	/^struct charField { unsigned char content[CFCLEN]; };$/;"	s	file:
check	dbg.h	28;"	d
check_debug	dbg.h	36;"	d
check_mem	dbg.h	34;"	d
clean_errno	dbg.h	15;"	d
compare	bstree.h	/^    BSTree_compare compare;$/;"	m	struct:BSTree
compare	hashmap.h	/^    Hashmap_compare compare;$/;"	m	struct:Hashmap
const_bstring	bstrlib.h	/^typedef const struct tagbstring * const_bstring;$/;"	t	typeref:struct:tagbstring
content	bstrlib.c	/^struct charField { LONG_TYPE content[CFCLEN]; };$/;"	m	struct:charField	file:
content	bstrlib.c	/^struct charField { unsigned char content[CFCLEN]; };$/;"	m	struct:charField	file:
contents	darray.h	/^    void **contents;$/;"	m	struct:DArray
contents	radixmap.h	/^    RMElement *contents;$/;"	m	struct:RadixMap
count	bstree.h	/^    int count;$/;"	m	struct:BSTree
count	list.h	/^    int count;$/;"	m	struct:List
counter	radixmap.h	/^    uint32_t counter;$/;"	m	struct:RadixMap
cstr2bstr	bstrlib.h	41;"	d
cstr2tbstr	bstrlib.h	219;"	d
darray_algos_h	darray_algos.h	2;"	d
data	bstree.h	/^    void *data;$/;"	m	struct:BSTreeNode
data	bstrlib.h	/^    unsigned char * data;$/;"	m	struct:tagbstring
data	hashmap.h	/^    void *data;$/;"	m	struct:HashmapNode
data	radixmap.h	/^    } data;$/;"	m	union:RMElement	typeref:struct:RMElement::__anon2
debug	dbg.h	11;"	d
debug	dbg.h	9;"	d
default_compare	bstree.c	/^static int default_compare(void *a, void *b)$/;"	f	file:
default_compare	hashmap.c	/^static int default_compare(void *a, void *b)$/;"	f	file:
default_hash	hashmap.c	/^static uint32_t default_hash(void *a)$/;"	f	file:
downcase	bstrlib.c	560;"	d	file:
element_size	darray.h	/^    size_t element_size;$/;"	m	struct:DArray
end	darray.h	/^    int end;$/;"	m	struct:DArray
end	radixmap.h	/^    size_t end;$/;"	m	struct:RadixMap
end	ringbuffer.h	/^    int end;$/;"	m	struct:__anon1
entry	bstrlib.h	/^    bstring * entry;$/;"	m	struct:bstrList
equal	tstree.h	/^    struct TSTree *equal;$/;"	m	struct:TSTree	typeref:struct:TSTree::TSTree
expand_rate	darray.h	/^    size_t expand_rate;$/;"	m	struct:DArray
exvsnprintf	bstrlib.c	2750;"	d	file:
exvsnprintf	bstrlib.c	2755;"	d	file:
exvsnprintf	bstrlib.c	2765;"	d	file:
findreplaceengine	bstrlib.c	/^static int findreplaceengine (bstring b, const_bstring find, const_bstring repl, int pos, instr_fnptr instr) {$/;"	f	file:
first	list.h	/^    ListNode *first;$/;"	m	struct:List
genBstrList	bstrlib.c	/^struct genBstrList {$/;"	s	file:
hash	hashmap.h	/^    Hashmap_hash hash;$/;"	m	struct:Hashmap
hash	hashmap.h	/^    uint32_t hash;$/;"	m	struct:HashmapNode
hashmap_algos_h	hashmap_algos.h	2;"	d
haystack	string_algos.h	/^    const unsigned char *haystack;$/;"	m	struct:StringScanner
high	tstree.h	/^    struct TSTree *high;$/;"	m	struct:TSTree	typeref:struct:TSTree::TSTree
hlen	string_algos.h	/^    ssize_t hlen;$/;"	m	struct:StringScanner
in	string_algos.h	/^    bstring in;$/;"	m	struct:StringScanner
indices	sarray.h	/^    int *indices;$/;"	m	struct:SuffixArray
instr_fnptr	bstrlib.c	/^typedef int (*instr_fnptr) (const_bstring s1, int pos, const_bstring s2);$/;"	t	file:
invertCharField	bstrlib.c	/^static void invertCharField (struct charField * cf) {$/;"	f	file:
isEOF	bstrlib.c	/^    int isEOF;		\/* track file's EOF state *\/$/;"	m	struct:bStream	file:
key	bstree.h	/^    void *key;$/;"	m	struct:BSTreeNode
key	hashmap.h	/^    void *key;$/;"	m	struct:HashmapNode
key	radixmap.h	/^        uint32_t key;$/;"	m	struct:RMElement::__anon2
last	list.h	/^    ListNode *last;$/;"	m	struct:List
lcthw_List_algos_h	list_algos.h	2;"	d
lcthw_List_h	list.h	2;"	d
lcthw_stats_h	stats.h	2;"	d
left	bstree.h	/^    struct BSTreeNode *left;$/;"	m	struct:BSTreeNode	typeref:struct:BSTreeNode::BSTreeNode
length	ringbuffer.h	/^    int length;$/;"	m	struct:__anon1
length	sarray.h	/^    int length;$/;"	m	struct:SuffixArray
log_err	dbg.h	17;"	d
log_info	dbg.h	25;"	d
log_warn	dbg.h	21;"	d
low	tstree.h	/^    struct TSTree *low;$/;"	m	struct:TSTree	typeref:struct:TSTree::TSTree
max	darray.h	/^    int max;$/;"	m	struct:DArray
max	radixmap.h	/^    size_t max;$/;"	m	struct:RadixMap
max	stats.h	/^    double max;$/;"	m	struct:Stats
maxBuffSz	bstrlib.c	/^    int maxBuffSz;$/;"	m	struct:bStream	file:
min	stats.h	/^    double min;$/;"	m	struct:Stats
mlen	bstrlib.h	/^    int mlen;$/;"	m	struct:tagbstring
mlen	bstrlib.h	/^    int qty, mlen;$/;"	m	struct:bstrList
n	stats.h	/^    unsigned long n;$/;"	m	struct:Stats
needle	string_algos.h	/^    const unsigned char *needle;$/;"	m	struct:StringScanner
next	list.h	/^    struct ListNode *next;$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode
nlen	string_algos.h	/^    ssize_t nlen;$/;"	m	struct:StringScanner
parent	bstree.h	/^    struct BSTreeNode *parent;$/;"	m	struct:BSTreeNode	typeref:struct:BSTreeNode::BSTreeNode
parm	bstrlib.c	/^    void * parm;		\/* The stream handle for core stream *\/$/;"	m	struct:bStream	file:
prev	list.h	/^    struct ListNode *prev;$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode
qty	bstrlib.h	/^    int qty, mlen;$/;"	m	struct:bstrList
radix_sort	radixmap.c	/^static inline void radix_sort(short offset, uint64_t max,$/;"	f	file:
raw	radixmap.h	/^    uint64_t raw;$/;"	m	union:RMElement
readFnPtr	bstrlib.c	/^    bNread readFnPtr;	\/* fread compatible fnptr for core stream *\/$/;"	m	struct:bStream	file:
right	bstree.h	/^    struct BSTreeNode *right;$/;"	m	struct:BSTreeNode	typeref:struct:BSTreeNode::BSTreeNode
root	bstree.h	/^    BSTreeNode *root;$/;"	m	struct:BSTree
sentinel	dbg.h	31;"	d
setInCharField	bstrlib.c	1281;"	d	file:
setInCharField	bstrlib.c	1291;"	d	file:
skip_chars	string_algos.h	/^    size_t skip_chars[UCHAR_MAX + 1];$/;"	m	struct:StringScanner
slen	bstrlib.h	/^    int slen;$/;"	m	struct:tagbstring
snapUpSize	bstrlib.c	/^static int snapUpSize (int i) {$/;"	f	file:
source	sarray.h	/^    char *source;$/;"	m	struct:SuffixArray
splitchar	tstree.h	/^    char splitchar;$/;"	m	struct:TSTree
start	ringbuffer.h	/^    int start;$/;"	m	struct:__anon1
string_algos_h	string_algos.h	2;"	d
sum	stats.h	/^    double sum;$/;"	m	struct:Stats
sumsq	stats.h	/^    double sumsq;$/;"	m	struct:Stats
tagbstring	bstrlib.h	/^struct tagbstring {$/;"	s
temp	radixmap.h	/^    RMElement *temp;$/;"	m	struct:RadixMap
testInCharField	bstrlib.c	1280;"	d	file:
testInCharField	bstrlib.c	1290;"	d	file:
upcase	bstrlib.c	559;"	d	file:
value	list.h	/^    void *value;$/;"	m	struct:ListNode
value	radixmap.h	/^        uint32_t value;$/;"	m	struct:RMElement::__anon2
value	tstree.h	/^    void *value;$/;"	m	struct:TSTree
wspace	bstrlib.c	561;"	d	file:
